package Laba;

import Laba.Crypto.ElGamal;
import Laba.Crypto.RSA;
import Laba.Crypto.GOST;

import java.io.*;
import java.nio.file.Files;
import java.util.Scanner;

public class Main {
    public static final String WHITE = "\u001B[38;5;255m";
    public static final String BLUE = "\u001B[38;5;21m";
    public static final String RED = "\u001B[38;5;196m";
    public static final String GREEN = "\u001B[38;5;46m";
    public static final String YELLOW = "\u001B[38;5;226m";
    public static final String RESET = "\u001B[0m";

    private static Scanner scanner = new Scanner(System.in);
    private static final String KEY_NAME = "default";

    public static void main(String[] args) {
        printHeader();

        try {
            while (true) {
                System.out.println(WHITE + "‚ïê".repeat(50) + RESET);
                System.out.println(GREEN + "üéØ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ:" + RESET);
                System.out.println(WHITE + "1. ‚úçÔ∏è  –°–û–ó–î–ê–ù–ò–ï –ö–õ–Æ–ß–ï–ô –ò –ü–û–î–ü–ò–°–ò");
                System.out.println("2. üîç –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ò");
                System.out.println("3. üîë –¢–û–õ–¨–ö–û –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–õ–Æ–ß–ï–ô");
                System.out.println("4. üóëÔ∏è  –£–î–ê–õ–ò–¢–¨ –í–°–ï –ö–õ–Æ–ß–ò –ò –ü–û–î–ü–ò–°–ò");
                System.out.println("0. üö™ –í–´–•–û–î");
                System.out.print(YELLOW + "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: " + RESET);

                int command = scanner.nextInt();
                scanner.nextLine();

                switch (command) {
                    case 1:
                        generateKeysAndSign();
                        break;
                    case 2:
                        verifySignatures();
                        break;
                    case 3:
                        generateKeysOnly();
                        break;
                    case 4:
                        deleteAllKeys();
                        break;
                    case 0:
                        System.out.println(GREEN + "\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!" + RESET);
                        return;
                    default:
                        System.out.println(RED + "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!" + RESET);
                }

                System.out.println("\n" + WHITE + "‚îÄ".repeat(50) + RESET);
                System.out.print(YELLOW + "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..." + RESET);
                scanner.nextLine();
            }

        } catch (Exception e) {
            System.out.println(RED + "‚ùå –û—à–∏–±–∫–∞: " + e.getMessage() + RESET);
            e.printStackTrace();
        } finally {
            scanner.close();
        }
    }

    private static void generateKeysAndSign() throws Exception {
        System.out.println(BLUE + "\n" + "üî∑".repeat(25));
        System.out.println("   –°–û–ó–î–ê–ù–ò–ï –ö–õ–Æ–ß–ï–ô –ò –ü–û–î–ü–ò–°–ò");
        System.out.println("üî∑".repeat(25) + RESET);

        System.out.print(WHITE + "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏: " + RESET);
        String filePath = scanner.nextLine();
        File file = new File(filePath);

        if (!file.exists()) {
            System.out.println(RED + "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!" + RESET);
            return;
        }

        System.out.println(WHITE + "üìÑ –§–∞–π–ª: " + file.getName());
        System.out.println("üìè –†–∞–∑–º–µ—Ä: " + file.length() + " –±–∞–π—Ç" + RESET);

        System.out.println(YELLOW + "\nüîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤..." + RESET);

        // ElGamal
        System.out.println(WHITE + "\nüî∑ ELGAMAL:" + RESET);
        ElGamal.SystemParams elGamalParams;
        if (KeyManager.systemParamsExist("elgamal")) {
            elGamalParams = (ElGamal.SystemParams) KeyManager.loadSystemParams("elgamal");
            System.out.println("   üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã");
        } else {
            elGamalParams = ElGamal.generateSystemParams();
            KeyManager.saveSystemParams("elgamal", elGamalParams);
            System.out.println("   ‚úÖ –°–æ–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã");
        }

        ElGamal elGamal = new ElGamal();
        ElGamal.KeyPair elGamalKeys = elGamal.generateKeyPair(elGamalParams);
        KeyManager.saveKeyPair("elgamal", KEY_NAME, elGamalKeys);
        ElGamal.Signature elGamalSig = elGamal.signFile(file, elGamalKeys);
        KeyManager.saveSignature("elgamal", file.getName(), elGamalSig);
        System.out.println("   ‚úÖ –ö–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø–æ–¥–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞");

        // RSA
        System.out.println(WHITE + "\n‚ö™ RSA:" + RESET);
        RSA rsa = new RSA();
        RSA.KeyPair rsaKeys = rsa.generateKeyPair();
        KeyManager.saveKeyPair("rsa", KEY_NAME, rsaKeys);
        RSA.Signature rsaSig = rsa.signFile(file, rsaKeys);
        KeyManager.saveSignature("rsa", file.getName(), rsaSig);
        System.out.println("   ‚úÖ –ö–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø–æ–¥–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞");

        // GOST
        System.out.println(WHITE + "\nüî¥ GOST:" + RESET);
        GOST.SystemParams gostParams;
        if (KeyManager.systemParamsExist("gost")) {
            gostParams = (GOST.SystemParams) KeyManager.loadSystemParams("gost");
            System.out.println("   üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã");
        } else {
            gostParams = GOST.generateSystemParams();
            KeyManager.saveSystemParams("gost", gostParams);
            System.out.println("   ‚úÖ –°–æ–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã");
        }

        GOST gost = new GOST();
        GOST.KeyPair gostKeys = gost.generateKeyPair(gostParams);
        KeyManager.saveKeyPair("gost", KEY_NAME, gostKeys);
        GOST.Signature gostSig = gost.signFile(file, gostKeys);
        KeyManager.saveSignature("gost", file.getName(), gostSig);
        System.out.println("   ‚úÖ –ö–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø–æ–¥–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞");

        System.out.println(GREEN + "\nüéâ –í–°–ï –ü–û–î–ü–ò–°–ò –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–´!" + RESET);
        printFileInfo();
    }

    private static void verifySignatures() throws Exception {
        System.out.println(RED + "\n" + "üîç".repeat(25));
        System.out.println("       –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ï–ô");
        System.out.println("üîç".repeat(25) + RESET);

        System.out.print(WHITE + "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: " + RESET);
        String filePath = scanner.nextLine();
        File file = new File(filePath);

        if (!file.exists()) {
            System.out.println(RED + "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!" + RESET);
            return;
        }

        System.out.println(WHITE + "üìÑ –§–∞–π–ª: " + file.getName());
        System.out.println("üìè –†–∞–∑–º–µ—Ä: " + file.length() + " –±–∞–π—Ç" + RESET);

        System.out.println(YELLOW + "\nüîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–µ–π..." + RESET);

        boolean[] results = new boolean[3];
        String[] algorithms = {"ELGAMAL", "RSA", "GOST"};
        String[] statusMessages = new String[3];
        String[] details = new String[3];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ ELGAMAL
        try {
            if (KeyManager.signatureExists("elgamal", file.getName()) &&
                    KeyManager.keyExists("elgamal", KEY_NAME)) {

                ElGamal.Signature elGamalSig = (ElGamal.Signature)
                        KeyManager.loadSignature("elgamal", file.getName());
                ElGamal.KeyPair elGamalKeys = (ElGamal.KeyPair)
                        KeyManager.loadKeyPair("elgamal", KEY_NAME);

                ElGamal elGamal = new ElGamal();
                results[0] = elGamal.verifyFile(file, elGamalSig, elGamalKeys);
                statusMessages[0] = results[0] ? "‚úÖ –ü–û–î–õ–ò–ù–ù–ê" : "‚ùå –ù–ï–î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–ê";
                details[0] = results[0] ? "–ù–∞–¥–µ–∂–Ω–æ –∫–∞–∫ –í–î–í!" : "–§–∞–π–ª –∏–∑–º–µ–Ω–µ–Ω!";
            } else {
                statusMessages[0] = "‚ö†Ô∏è  –û–¢–°–£–¢–°–¢–í–£–ï–¢";
                details[0] = "–ö–ª—é—á–∏ –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã";
                results[0] = false;
            }
        } catch (Exception e) {
            statusMessages[0] = "üíî –û–®–ò–ë–ö–ê";
            details[0] = "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: " + e.getMessage();
            results[0] = false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ RSA
        try {
            if (KeyManager.signatureExists("rsa", file.getName()) &&
                    KeyManager.keyExists("rsa", KEY_NAME)) {

                RSA.Signature rsaSig = (RSA.Signature)
                        KeyManager.loadSignature("rsa", file.getName());
                RSA.KeyPair rsaKeys = (RSA.KeyPair)
                        KeyManager.loadKeyPair("rsa", KEY_NAME);

                RSA rsa = new RSA();
                results[1] = rsa.verifyFile(file, rsaSig, rsaKeys.publicKey, rsaKeys.e);
                statusMessages[1] = results[1] ? "‚úÖ –ü–û–î–õ–ò–ù–ù–ê" : "‚ùå –ù–ï–î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–ê";
                details[1] = results[1] ? "–ö—Ä–µ–ø–∫–∞ –∫–∞–∫ —Å—Ç–∞–ª—å!" : "–§–∞–π–ª –∏–∑–º–µ–Ω–µ–Ω!";
            } else {
                statusMessages[1] = "‚ö†Ô∏è  –û–¢–°–£–¢–°–¢–í–£–ï–¢";
                details[1] = "–ö–ª—é—á–∏ –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã";
                results[1] = false;
            }
        } catch (Exception e) {
            statusMessages[1] = "üíî –û–®–ò–ë–ö–ê";
            details[1] = "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: " + e.getMessage();
            results[1] = false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ GOST
        try {
            if (KeyManager.signatureExists("gost", file.getName()) &&
                    KeyManager.keyExists("gost", KEY_NAME)) {

                GOST.Signature gostSig = (GOST.Signature)
                        KeyManager.loadSignature("gost", file.getName());
                GOST.KeyPair gostKeys = (GOST.KeyPair)
                        KeyManager.loadKeyPair("gost", KEY_NAME);

                GOST gost = new GOST();
                results[2] = gost.verifyFile(file, gostSig, gostKeys);
                statusMessages[2] = results[2] ? "‚úÖ –ü–û–î–õ–ò–ù–ù–ê" : "‚ùå –ù–ï–î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–ê";
                details[2] = results[2] ? "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ì–û–°–¢—É!" : "–§–∞–π–ª –∏–∑–º–µ–Ω–µ–Ω!";
            } else {
                statusMessages[2] = "‚ö†Ô∏è  –û–¢–°–£–¢–°–¢–í–£–ï–¢";
                details[2] = "–ö–ª—é—á–∏ –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã";
                results[2] = false;
            }
        } catch (Exception e) {
            statusMessages[2] = "üíî –û–®–ò–ë–ö–ê";
            details[2] = "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: " + e.getMessage();
            results[2] = false;
        }

        printVerificationResults(results, algorithms, statusMessages, details);
    }

    private static void generateKeysOnly() throws Exception {
        System.out.println(GREEN + "\n" + "üîë".repeat(25));
        System.out.println("   –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–õ–Æ–ß–ï–ô");
        System.out.println("üîë".repeat(25) + RESET);

        System.out.println(YELLOW + "\nüîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π..." + RESET);

        // ElGamal
        System.out.println(WHITE + "\nüî∑ ELGAMAL:" + RESET);
        ElGamal.SystemParams elGamalParams = ElGamal.generateSystemParams();
        KeyManager.saveSystemParams("elgamal", elGamalParams);
        ElGamal elGamal = new ElGamal();
        ElGamal.KeyPair elGamalKeys = elGamal.generateKeyPair(elGamalParams);
        KeyManager.saveKeyPair("elgamal", KEY_NAME, elGamalKeys);
        System.out.println("   ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∫–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã");

        // RSA
        System.out.println(WHITE + "\n‚ö™ RSA:" + RESET);
        RSA rsa = new RSA();
        RSA.KeyPair rsaKeys = rsa.generateKeyPair();
        KeyManager.saveKeyPair("rsa", KEY_NAME, rsaKeys);
        System.out.println("   ‚úÖ –ö–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã");

        // GOST
        System.out.println(WHITE + "\nüî¥ GOST:" + RESET);
        GOST.SystemParams gostParams = GOST.generateSystemParams();
        KeyManager.saveSystemParams("gost", gostParams);
        GOST gost = new GOST();
        GOST.KeyPair gostKeys = gost.generateKeyPair(gostParams);
        KeyManager.saveKeyPair("gost", KEY_NAME, gostKeys);
        System.out.println("   ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∫–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã");

        System.out.println(GREEN + "\nüéâ –í–°–ï –ö–õ–Æ–ß–ò –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–´!" + RESET);
        printFileInfo();
    }

    private static void deleteAllKeys() throws Exception {
        System.out.println(RED + "\n" + "üóëÔ∏è".repeat(25));
        System.out.println("   –£–î–ê–õ–ï–ù–ò–ï –ö–õ–Æ–ß–ï–ô –ò –ü–û–î–ü–ò–°–ï–ô");
        System.out.println("üóëÔ∏è".repeat(25) + RESET);

        System.out.print(YELLOW + "–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N): " + RESET);
        String confirmation = scanner.nextLine();

        if (!confirmation.equalsIgnoreCase("y")) {
            System.out.println(WHITE + "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ" + RESET);
            return;
        }

        File keysDir = new File("keys/");
        if (!keysDir.exists()) {
            System.out.println(WHITE + "‚ÑπÔ∏è –ü–∞–ø–∫–∞ keys/ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" + RESET);
            return;
        }

        int deletedCount = 0;
        File[] files = keysDir.listFiles();
        if (files != null) {
            for (File file : files) {
                if (file.delete()) {
                    deletedCount++;
                }
            }
        }

        if (keysDir.delete()) {
            System.out.println(GREEN + "‚úÖ –ü–∞–ø–∫–∞ keys/ —É–¥–∞–ª–µ–Ω–∞" + RESET);
        }

        System.out.println(WHITE + "üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: " + deletedCount + RESET);
        System.out.println(GREEN + "üéâ –í—Å–µ –∫–ª—é—á–∏ –∏ –ø–æ–¥–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã!" + RESET);
    }

    private static void printVerificationResults(boolean[] results, String[] algorithms,
                                                 String[] statusMessages, String[] details) {
        System.out.println(WHITE + "\n" + "‚ïê".repeat(60));
        System.out.println("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò –ü–û–î–ü–ò–°–ï–ô");
        System.out.println("‚ïê".repeat(60) + RESET);

        System.out.println(BLUE + "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
        System.out.println("‚îÇ     –ê–ª–≥–æ—Ä–∏—Ç–º      ‚îÇ     –°—Ç–∞—Ç—É—Å      ‚îÇ         –î–µ—Ç–∞–ª–∏               ‚îÇ");
        System.out.println("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§");

        for (int i = 0; i < results.length; i++) {
            String statusColor = "";
            if (statusMessages[i].startsWith("‚úÖ")) statusColor = GREEN;
            else if (statusMessages[i].startsWith("‚ùå")) statusColor = RED;
            else if (statusMessages[i].startsWith("‚ö†Ô∏è")) statusColor = YELLOW;
            else statusColor = RED;

            System.out.printf("‚îÇ      %-11s ‚îÇ   %s%-12s%s ‚îÇ   %-25s ‚îÇ\n",
                    algorithms[i],
                    statusColor, statusMessages[i], BLUE,
                    details[i]);
        }

        System.out.println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" + RESET);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        int validCount = 0;
        for (boolean result : results) {
            if (result) validCount++;
        }

        System.out.println(WHITE + "\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê: " + validCount + "/3 –ø–æ–¥–ø–∏—Å–µ–π –ø–æ–¥–ª–∏–Ω–Ω—ã" + RESET);

        if (validCount == 3) {
            System.out.println(GREEN + "\nüéâ –í–°–ï –ü–û–î–ü–ò–°–ò –í–ï–†–ù–´!" + RESET);
            System.out.println(WHITE + "üí™ –§–∞–π–ª –∞—É—Ç–µ–Ω—Ç–∏—á–µ–Ω –∏ –Ω–µ –∏–∑–º–µ–Ω—è–ª—Å—è" + RESET);
            System.out.println(BLUE + "üá∑üá∫ –°–õ–ê–í–ê –†–û–°–°–ò–ô–°–ö–û–ô –ö–†–ò–ü–¢–û–ì–†–ê–§–ò–ò! üá∑üá∫" + RESET);
        } else if (validCount > 0) {
            System.out.println(YELLOW + "\n‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–ê–Ø –ê–£–¢–ï–ù–¢–ò–ß–ù–û–°–¢–¨!" + RESET);
            System.out.println(WHITE + "üîß –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã" + RESET);
        } else {
            System.out.println(RED + "\nüö® –§–ê–ô–õ –ù–ï –ê–£–¢–ï–ù–¢–ò–ß–ï–ù!" + RESET);
            System.out.println(WHITE + "üíÄ –§–∞–π–ª –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –ø–æ–¥–¥–µ–ª–∞–Ω—ã!" + RESET);
        }
    }

    private static void printFileInfo() {
        File keysDir = new File("keys/");
        if (keysDir.exists()) {
            File[] files = keysDir.listFiles();
            if (files != null && files.length > 0) {
                System.out.println(WHITE + "\nüìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ keys/:" + RESET);
                for (File file : files) {
                    System.out.println("   üìÑ " + file.getName() + " (" + file.length() + " –±–∞–π—Ç)");
                }
            }
        }
    }

    private static void printHeader() {
        System.out.println(WHITE + "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà");
        System.out.println(BLUE + "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà");
        System.out.println(RED + "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà" + RESET);
        System.out.println(WHITE + "\nüá∑üá∫  –†–û–°–°–ò–ô–°–ö–ê–Ø –ë–ò–ë–õ–ò–û–¢–ï–ö–ê –≠–õ–ï–ö–¢–†–û–ù–ù–û–ô –ü–û–î–ü–ò–°–ò  üá∑üá∫" + RESET);
        System.out.println(BLUE + "       –ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ–ª–∏—á–∏—è –†–æ–¥–∏–Ω—ã!" + RESET);
        System.out.println(WHITE + "           –ê–ª–≥–æ—Ä–∏—Ç–º—ã: ElGamal, RSA, GOST" + RESET);
        System.out.println();
    }
}